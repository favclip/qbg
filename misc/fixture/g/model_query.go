// generated by qbg -output misc/fixture/g/model_query.go -private misc/fixture/g; DO NOT EDIT

package g

import (
	"github.com/favclip/qbg/qbgutils"
	"google.golang.org/appengine/datastore"
)

// fooBarQueryBuilder build query for fooBar.
type fooBarQueryBuilder struct {
	q      *datastore.Query
	plugin qbgutils.Plugin
	Foo    *fooBarQueryProperty
}

// fooBarQueryProperty has property information for fooBarQueryBuilder.
type fooBarQueryProperty struct {
	bldr *fooBarQueryBuilder
	name string
}

// newFooBarQueryBuilder create new FooBarQueryBuilder.
func newFooBarQueryBuilder() *fooBarQueryBuilder {
	return newFooBarQueryBuilderWithKind("fooBar")
}

// newFooBarQueryBuilderWithKind create new FooBarQueryBuilder with specific kind.
func newFooBarQueryBuilderWithKind(kind string) *fooBarQueryBuilder {
	q := datastore.NewQuery(kind)
	bldr := &fooBarQueryBuilder{q: q}
	bldr.Foo = &fooBarQueryProperty{
		bldr: bldr,
		name: "Foo",
	}

	if plugger, ok := interface{}(bldr).(qbgutils.Plugger); ok {
		bldr.plugin = plugger.Plugin()
		bldr.plugin.Init("FooBar")
	}

	return bldr
}

// Ancestor sets parent key to ancestor query.
func (bldr *fooBarQueryBuilder) Ancestor(parentKey *datastore.Key) *fooBarQueryBuilder {
	bldr.q = bldr.q.Ancestor(parentKey)
	if bldr.plugin != nil {
		bldr.plugin.Ancestor(parentKey)
	}
	return bldr
}

// KeysOnly sets keys only option to query.
func (bldr *fooBarQueryBuilder) KeysOnly() *fooBarQueryBuilder {
	bldr.q = bldr.q.KeysOnly()
	if bldr.plugin != nil {
		bldr.plugin.KeysOnly()
	}
	return bldr
}

// Start setup to query.
func (bldr *fooBarQueryBuilder) Start(cur datastore.Cursor) *fooBarQueryBuilder {
	bldr.q = bldr.q.Start(cur)
	if bldr.plugin != nil {
		bldr.plugin.Start(cur)
	}
	return bldr
}

// Offset setup to query.
func (bldr *fooBarQueryBuilder) Offset(offset int) *fooBarQueryBuilder {
	bldr.q = bldr.q.Offset(offset)
	if bldr.plugin != nil {
		bldr.plugin.Offset(offset)
	}
	return bldr
}

// Limit setup to query.
func (bldr *fooBarQueryBuilder) Limit(limit int) *fooBarQueryBuilder {
	bldr.q = bldr.q.Limit(limit)
	if bldr.plugin != nil {
		bldr.plugin.Limit(limit)
	}
	return bldr
}

// Query returns *datastore.Query.
func (bldr *fooBarQueryBuilder) Query() *datastore.Query {
	return bldr.q
}

// Filter with op & value.
func (p *fooBarQueryProperty) Filter(op string, value interface{}) *fooBarQueryBuilder {
	switch op {
	case "<=":
		p.LessThanOrEqual(value)
	case ">=":
		p.GreaterThanOrEqual(value)
	case "<":
		p.LessThan(value)
	case ">":
		p.GreaterThan(value)
	case "=":
		p.Equal(value)
	default:
		p.bldr.q = p.bldr.q.Filter(p.name+" "+op, value) // error raised by native query
	}
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, op, value)
	}
	return p.bldr
}

// LessThanOrEqual filter with value.
func (p *fooBarQueryProperty) LessThanOrEqual(value interface{}) *fooBarQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" <=", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, "<=", value)
	}
	return p.bldr
}

// GreaterThanOrEqual filter with value.
func (p *fooBarQueryProperty) GreaterThanOrEqual(value interface{}) *fooBarQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" >=", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, ">=", value)
	}
	return p.bldr
}

// LessThan filter with value.
func (p *fooBarQueryProperty) LessThan(value interface{}) *fooBarQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" <", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, "<", value)
	}
	return p.bldr
}

// GreaterThan filter with value.
func (p *fooBarQueryProperty) GreaterThan(value interface{}) *fooBarQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" >", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, ">", value)
	}
	return p.bldr
}

// Equal filter with value.
func (p *fooBarQueryProperty) Equal(value interface{}) *fooBarQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" =", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, "=", value)
	}
	return p.bldr
}

// Asc order.
func (p *fooBarQueryProperty) Asc() *fooBarQueryBuilder {
	p.bldr.q = p.bldr.q.Order(p.name)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Asc(p.name)
	}
	return p.bldr
}

// Desc order.
func (p *fooBarQueryProperty) Desc() *fooBarQueryBuilder {
	p.bldr.q = p.bldr.q.Order("-" + p.name)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Desc(p.name)
	}
	return p.bldr
}

// aeDataQueryBuilder build query for aeData.
type aeDataQueryBuilder struct {
	q      *datastore.Query
	plugin qbgutils.Plugin
	Foo    *aeDataQueryProperty
}

// aeDataQueryProperty has property information for aeDataQueryBuilder.
type aeDataQueryProperty struct {
	bldr *aeDataQueryBuilder
	name string
}

// newAEDataQueryBuilder create new AEDataQueryBuilder.
func newAEDataQueryBuilder() *aeDataQueryBuilder {
	return newAEDataQueryBuilderWithKind("aeData")
}

// newAEDataQueryBuilderWithKind create new AEDataQueryBuilder with specific kind.
func newAEDataQueryBuilderWithKind(kind string) *aeDataQueryBuilder {
	q := datastore.NewQuery(kind)
	bldr := &aeDataQueryBuilder{q: q}
	bldr.Foo = &aeDataQueryProperty{
		bldr: bldr,
		name: "Foo",
	}

	if plugger, ok := interface{}(bldr).(qbgutils.Plugger); ok {
		bldr.plugin = plugger.Plugin()
		bldr.plugin.Init("AEData")
	}

	return bldr
}

// Ancestor sets parent key to ancestor query.
func (bldr *aeDataQueryBuilder) Ancestor(parentKey *datastore.Key) *aeDataQueryBuilder {
	bldr.q = bldr.q.Ancestor(parentKey)
	if bldr.plugin != nil {
		bldr.plugin.Ancestor(parentKey)
	}
	return bldr
}

// KeysOnly sets keys only option to query.
func (bldr *aeDataQueryBuilder) KeysOnly() *aeDataQueryBuilder {
	bldr.q = bldr.q.KeysOnly()
	if bldr.plugin != nil {
		bldr.plugin.KeysOnly()
	}
	return bldr
}

// Start setup to query.
func (bldr *aeDataQueryBuilder) Start(cur datastore.Cursor) *aeDataQueryBuilder {
	bldr.q = bldr.q.Start(cur)
	if bldr.plugin != nil {
		bldr.plugin.Start(cur)
	}
	return bldr
}

// Offset setup to query.
func (bldr *aeDataQueryBuilder) Offset(offset int) *aeDataQueryBuilder {
	bldr.q = bldr.q.Offset(offset)
	if bldr.plugin != nil {
		bldr.plugin.Offset(offset)
	}
	return bldr
}

// Limit setup to query.
func (bldr *aeDataQueryBuilder) Limit(limit int) *aeDataQueryBuilder {
	bldr.q = bldr.q.Limit(limit)
	if bldr.plugin != nil {
		bldr.plugin.Limit(limit)
	}
	return bldr
}

// Query returns *datastore.Query.
func (bldr *aeDataQueryBuilder) Query() *datastore.Query {
	return bldr.q
}

// Filter with op & value.
func (p *aeDataQueryProperty) Filter(op string, value interface{}) *aeDataQueryBuilder {
	switch op {
	case "<=":
		p.LessThanOrEqual(value)
	case ">=":
		p.GreaterThanOrEqual(value)
	case "<":
		p.LessThan(value)
	case ">":
		p.GreaterThan(value)
	case "=":
		p.Equal(value)
	default:
		p.bldr.q = p.bldr.q.Filter(p.name+" "+op, value) // error raised by native query
	}
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, op, value)
	}
	return p.bldr
}

// LessThanOrEqual filter with value.
func (p *aeDataQueryProperty) LessThanOrEqual(value interface{}) *aeDataQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" <=", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, "<=", value)
	}
	return p.bldr
}

// GreaterThanOrEqual filter with value.
func (p *aeDataQueryProperty) GreaterThanOrEqual(value interface{}) *aeDataQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" >=", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, ">=", value)
	}
	return p.bldr
}

// LessThan filter with value.
func (p *aeDataQueryProperty) LessThan(value interface{}) *aeDataQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" <", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, "<", value)
	}
	return p.bldr
}

// GreaterThan filter with value.
func (p *aeDataQueryProperty) GreaterThan(value interface{}) *aeDataQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" >", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, ">", value)
	}
	return p.bldr
}

// Equal filter with value.
func (p *aeDataQueryProperty) Equal(value interface{}) *aeDataQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" =", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, "=", value)
	}
	return p.bldr
}

// Asc order.
func (p *aeDataQueryProperty) Asc() *aeDataQueryBuilder {
	p.bldr.q = p.bldr.q.Order(p.name)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Asc(p.name)
	}
	return p.bldr
}

// Desc order.
func (p *aeDataQueryProperty) Desc() *aeDataQueryBuilder {
	p.bldr.q = p.bldr.q.Order("-" + p.name)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Desc(p.name)
	}
	return p.bldr
}

// iisQueryBuilder build query for iis.
type iisQueryBuilder struct {
	q      *datastore.Query
	plugin qbgutils.Plugin
	Foo    *iisQueryProperty
}

// iisQueryProperty has property information for iisQueryBuilder.
type iisQueryProperty struct {
	bldr *iisQueryBuilder
	name string
}

// newIISQueryBuilder create new IISQueryBuilder.
func newIISQueryBuilder() *iisQueryBuilder {
	return newIISQueryBuilderWithKind("iis")
}

// newIISQueryBuilderWithKind create new IISQueryBuilder with specific kind.
func newIISQueryBuilderWithKind(kind string) *iisQueryBuilder {
	q := datastore.NewQuery(kind)
	bldr := &iisQueryBuilder{q: q}
	bldr.Foo = &iisQueryProperty{
		bldr: bldr,
		name: "Foo",
	}

	if plugger, ok := interface{}(bldr).(qbgutils.Plugger); ok {
		bldr.plugin = plugger.Plugin()
		bldr.plugin.Init("IIS")
	}

	return bldr
}

// Ancestor sets parent key to ancestor query.
func (bldr *iisQueryBuilder) Ancestor(parentKey *datastore.Key) *iisQueryBuilder {
	bldr.q = bldr.q.Ancestor(parentKey)
	if bldr.plugin != nil {
		bldr.plugin.Ancestor(parentKey)
	}
	return bldr
}

// KeysOnly sets keys only option to query.
func (bldr *iisQueryBuilder) KeysOnly() *iisQueryBuilder {
	bldr.q = bldr.q.KeysOnly()
	if bldr.plugin != nil {
		bldr.plugin.KeysOnly()
	}
	return bldr
}

// Start setup to query.
func (bldr *iisQueryBuilder) Start(cur datastore.Cursor) *iisQueryBuilder {
	bldr.q = bldr.q.Start(cur)
	if bldr.plugin != nil {
		bldr.plugin.Start(cur)
	}
	return bldr
}

// Offset setup to query.
func (bldr *iisQueryBuilder) Offset(offset int) *iisQueryBuilder {
	bldr.q = bldr.q.Offset(offset)
	if bldr.plugin != nil {
		bldr.plugin.Offset(offset)
	}
	return bldr
}

// Limit setup to query.
func (bldr *iisQueryBuilder) Limit(limit int) *iisQueryBuilder {
	bldr.q = bldr.q.Limit(limit)
	if bldr.plugin != nil {
		bldr.plugin.Limit(limit)
	}
	return bldr
}

// Query returns *datastore.Query.
func (bldr *iisQueryBuilder) Query() *datastore.Query {
	return bldr.q
}

// Filter with op & value.
func (p *iisQueryProperty) Filter(op string, value interface{}) *iisQueryBuilder {
	switch op {
	case "<=":
		p.LessThanOrEqual(value)
	case ">=":
		p.GreaterThanOrEqual(value)
	case "<":
		p.LessThan(value)
	case ">":
		p.GreaterThan(value)
	case "=":
		p.Equal(value)
	default:
		p.bldr.q = p.bldr.q.Filter(p.name+" "+op, value) // error raised by native query
	}
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, op, value)
	}
	return p.bldr
}

// LessThanOrEqual filter with value.
func (p *iisQueryProperty) LessThanOrEqual(value interface{}) *iisQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" <=", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, "<=", value)
	}
	return p.bldr
}

// GreaterThanOrEqual filter with value.
func (p *iisQueryProperty) GreaterThanOrEqual(value interface{}) *iisQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" >=", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, ">=", value)
	}
	return p.bldr
}

// LessThan filter with value.
func (p *iisQueryProperty) LessThan(value interface{}) *iisQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" <", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, "<", value)
	}
	return p.bldr
}

// GreaterThan filter with value.
func (p *iisQueryProperty) GreaterThan(value interface{}) *iisQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" >", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, ">", value)
	}
	return p.bldr
}

// Equal filter with value.
func (p *iisQueryProperty) Equal(value interface{}) *iisQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" =", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, "=", value)
	}
	return p.bldr
}

// Asc order.
func (p *iisQueryProperty) Asc() *iisQueryBuilder {
	p.bldr.q = p.bldr.q.Order(p.name)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Asc(p.name)
	}
	return p.bldr
}

// Desc order.
func (p *iisQueryProperty) Desc() *iisQueryBuilder {
	p.bldr.q = p.bldr.q.Order("-" + p.name)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Desc(p.name)
	}
	return p.bldr
}
